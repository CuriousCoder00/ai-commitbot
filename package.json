{
  "name": "ai-auto-commit",
  "displayName": "AI Auto Commit",
  "description": "Generate intelligent commit messages using Gemini AI",
  "version": "1.0.2",
  "publisher": "kjxcodez",
  "author": {
    "name": "kjxcodez"
  },
  "license": "MIT",
  "homepage": "https://github.com/CuriousCoder00/ai-commitbot",
  "repository": {
    "type": "git",
    "url": "https://github.com/CuriousCoder00/ai-commitbot.git"
  },
  "bugs": {
    "url": "https://github.com/CuriousCoder00/ai-commitbot.git/issues"
  },
  "icon": "icon.png",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "SCM Providers"
  ],
  "keywords": [
    "git",
    "commit",
    "ai",
    "gemini",
    "automation"
  ],
  "activationEvents": [
    "onCommand:aiAutoCommit.generateCommit"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "aiAutoCommit.generateCommit",
        "title": "ü§ñ Generate AI Commit Message",
        "category": "AI Auto Commit",
        "icon": "$(robot)"
      },
      {
        "command": "aiAutoCommit.configureApiKey",
        "title": "üîë Configure Gemini API Key",
        "category": "AI Auto Commit",
        "icon": "$(key)"
      },
      {
        "command": "aiAutoCommit.openSettings",
        "title": "‚öôÔ∏è Open Settings",
        "category": "AI Auto Commit",
        "icon": "$(settings-gear)"
      },
      {
        "command": "aiAutoCommit.reloadPrompts",
        "title": "üîÑ Reload Prompts",
        "category": "AI Auto Commit",
        "icon": "$(refresh)"
      }
    ],
    "configuration": {
      "title": "AI Auto Commit",
      "properties": {
        "aiAutoCommit.geminiApiKey": {
          "type": "string",
          "default": "",
          "description": "Your Gemini AI API key (get it from Google AI Studio)",
          "order": 1
        },
        "aiAutoCommit.commitStyle": {
          "type": "string",
          "enum": [
            "conventional",
            "descriptive",
            "concise",
            "semantic",
            "gitmoji"
          ],
          "enumDescriptions": [
            "Conventional Commits format (feat: add new feature)",
            "Detailed description with bullet points",
            "Short and concise messages",
            "Conventional with emojis (‚ú® feat: add feature)",
            "Gitmoji format (‚ú® add new feature)"
          ],
          "default": "conventional",
          "description": "Commit message style preference",
          "order": 2
        },
        "aiAutoCommit.maxDiffSize": {
          "type": "number",
          "default": 5000,
          "minimum": 1000,
          "maximum": 20000,
          "description": "Maximum diff size to send to AI (characters)",
          "order": 3
        },
        "aiAutoCommit.autoCommit": {
          "type": "boolean",
          "default": false,
          "description": "Automatically commit after generating message (without confirmation)",
          "order": 4
        },
        "aiAutoCommit.customInstructions": {
          "type": "string",
          "default": "",
          "description": "Additional custom instructions for commit message generation",
          "order": 5
        },
        "aiAutoCommit.excludeFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "package-lock.json",
            "yarn.lock",
            "pnpm-lock.yaml",
            "*.min.js",
            "*.min.css",
            "dist/**",
            "build/**"
          ],
          "description": "File patterns to exclude from diff analysis",
          "order": 6
        },
        "aiAutoCommit.includeContext": {
          "type": "boolean",
          "default": true,
          "description": "Include branch name and recent commits for better context",
          "order": 7
        },
        "aiAutoCommit.temperature": {
          "type": "number",
          "default": 0.3,
          "minimum": 0,
          "maximum": 1,
          "description": "AI creativity level (0.0 = consistent, 1.0 = creative)",
          "order": 8
        },
        "aiAutoCommit.showNotifications": {
          "type": "boolean",
          "default": true,
          "description": "Show success/error notifications",
          "order": 9
        },
        "aiAutoCommit.enableTelemetry": {
          "type": "boolean",
          "default": false,
          "description": "Help improve the extension by sending anonymous usage data",
          "order": 10
        }
      }
    },
    "menus": {
      "scm/title": [
        {
          "command": "aiAutoCommit.generateCommit",
          "when": "scmProvider == git && gitOpenRepositoryCount != 0",
          "group": "navigation@1"
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "aiAutoCommit.generateCommit",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        }
      ],
      "commandPalette": [
        {
          "command": "aiAutoCommit.generateCommit",
          "when": "scmProvider == git"
        },
        {
          "command": "aiAutoCommit.configureApiKey"
        },
        {
          "command": "aiAutoCommit.testConnection"
        },
        {
          "command": "aiAutoCommit.openSettings"
        },
        {
          "command": "aiAutoCommit.reloadPrompts"
        }
      ],
      "view/title": [
        {
          "command": "aiAutoCommit.generateCommit",
          "when": "view == workbench.scm && scmProvider == git",
          "group": "navigation"
        }
      ]
    },
    "keybindings": [
      {
        "command": "aiAutoCommit.generateCommit",
        "key": "ctrl+shift+g ctrl+shift+a",
        "mac": "cmd+shift+g cmd+shift+a",
        "when": "scmProvider == git"
      }
    ],
    "walkthroughs": [
      {
        "id": "aiAutoCommit.setup",
        "title": "Get Started with AI Auto Commit",
        "description": "Learn how to set up and use AI-powered commit messages",
        "steps": [
          {
            "id": "apiKey",
            "title": "Configure API Key",
            "description": "Set up your Gemini API key to start generating commit messages.\n[Configure API Key](command:aiAutoCommit.configureApiKey)",
            "media": {
              "markdown": "walkthrough/setup-api-key.md"
            }
          },
          {
            "id": "firstCommit",
            "title": "Generate Your First Commit",
            "description": "Try generating your first AI commit message.\n[Generate Commit](command:aiAutoCommit.generateCommit)",
            "media": {
              "markdown": "walkthrough/first-commit.md"
            }
          },
          {
            "id": "customizeStyle",
            "title": "Customize Your Style",
            "description": "Choose from different commit message styles.\n[Open Settings](command:aiAutoCommit.openSettings)",
            "media": {
              "markdown": "walkthrough/customize-style.md"
            }
          }
        ]
      }
    ]
  },
  "badges": [
    {
      "url": "https://img.shields.io/github/stars/CuriousCoder00/ai-commitbot",
      "href": "https://github.com/CuriousCoder00/ai-commitbot",
      "description": "GitHub Stars"
    },
    {
      "url": "https://img.shields.io/visual-studio-marketplace/i/kjxcodez.ai-auto-commit",
      "href": "https://marketplace.visualstudio.com/items?itemName=kjxcodez.ai-auto-commit",
      "description": "Installs"
    }
  ],
  "qna": "https://github.com/CuriousCoder00/ai-commitbot/discussions",
  "extensionDependencies": [],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "18.x",
    "@types/mocha": "^10.0.1",
    "@types/glob": "^8.1.0",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "eslint": "^8.26.0",
    "esbuild": "^0.19.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.2.0",
    "@vscode/test-electron": "^2.3.4"
  },
  "dependencies": {
    "simple-git": "^3.19.1",
    "@google/generative-ai": "^0.2.1"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/CuriousCoder00"
  }
}
